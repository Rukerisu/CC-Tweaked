-- bigreactors_monitor_en_no_comments

local peripheralName = "BigReactors-Energizer"
local energizer = peripheral.find(peripheralName)
local monitor = peripheral.find("monitor")

local t = monitor or term

local COLOR_BLACK = colors.black
local COLOR_WHITE = colors.white
local COLOR_GREEN = colors.green
local COLOR_RED = colors.red
local COLOR_BLUE = colors.blue
local COLOR_LIGHT_GRAY = colors.lightGray
local COLOR_YELLOW = colors.yellow
local COLOR_ORANGE = colors.orange
local COLOR_PURPLE = colors.purple
local COLOR_CYAN = colors.cyan

local function centerText(text, width, y, bgColor, textColor, scale)
    t.setTextScale(scale or 1)
    local scaledWidth = math.floor(width / (scale or 1))
    local x = math.floor((scaledWidth - #text) / 2) + 1
    t.setBackgroundColor(bgColor)
    t.setTextColor(textColor)
    t.setCursorPos(x, y)
    t.write(text)
end

local function printStyled(text, x, y, bgColor, textColor, scale)
    t.setTextScale(scale or 1)
    t.setBackgroundColor(bgColor)
    t.setTextColor(textColor)
    t.setCursorPos(x, y)
    t.write(text)
end

if not energizer then
    t.setBackgroundColor(COLOR_BLACK)
    t.setTextColor(COLOR_RED)
    t.clear()
    t.setCursorPos(1, 1)
    t.write("Error: Energizer not found.")
    t.write("Make sure the Computer Port is connected.")
    t.write("If using a different name, change 'peripheralName'.")
    return
end

local lastStoredEnergy = energizer.getEnergyStored()
local lastUpdateTime = os.time()

print("Energizer monitoring started on MEGA display (4x3)...")

while true do
    local currentStoredEnergy = energizer.getEnergyStored()
    local capacity = energizer.getCapacity()
    local currentTime = os.time()

    local monitorWidth, monitorHeight = t.getSize()

    local energyChange = currentStoredEnergy - lastStoredEnergy
    local timeDelta = currentTime - lastUpdateTime

    local energyInput = 0
    local energyOutput = 0

    if timeDelta > 0 then
        if energyChange > 0 then
            energyInput = energyChange / timeDelta
        elseif energyChange < 0 then
            energyOutput = math.abs(energyChange) / timeDelta
        end
    end

    local percentage = 0
    if capacity > 0 then
        percentage = (currentStoredEnergy / capacity) * 100
    end

    t.setBackgroundColor(COLOR_BLACK)
    t.setTextColor(COLOR_WHITE)
    t.clear()

    local headerScale = 2
    centerText("=== Big Reactors Energizer Status ===", monitorWidth, 2, COLOR_PURPLE, COLOR_YELLOW, headerScale)
    
    local sectionScale = 1.5
    local valueScale = 2.5

    printStyled("Stored Energy:", 5, 8, COLOR_BLACK, COLOR_WHITE, sectionScale)
    printStyled(string.format("%,.0f RF", currentStoredEnergy), 5, 11, COLOR_BLACK, COLOR_LIGHT_GRAY, valueScale)

    printStyled("Capacity:", 5, 18, COLOR_BLACK, COLOR_WHITE, sectionScale)
    printStyled(string.format("%,.0f RF", capacity), 5, 21, COLOR_BLACK, COLOR_LIGHT_GRAY, valueScale)

    local percentColor = COLOR_RED
    if percentage >= 90 then
        percentColor = COLOR_GREEN
    elseif percentage >= 50 then
        percentColor = COLOR_YELLOW
    end
    printStyled("Fill Level:", 5, 28, COLOR_BLACK, COLOR_WHITE, sectionScale)
    printStyled(string.format("%.2f%%", percentage), 5, 31, COLOR_BLACK, percentColor, valueScale)

    local ioScale = 2
    local ioXPos = monitorWidth / 2 + 5

    printStyled("Energy Input:", ioXPos, 8, COLOR_BLACK, COLOR_WHITE, sectionScale)
    printStyled(string.format("+%,.0f RF/s", energyInput), ioXPos, 11, COLOR_BLACK, COLOR_GREEN, ioScale)

    printStyled("Energy Output:", ioXPos, 18, COLOR_BLACK, COLOR_WHITE, sectionScale)
    printStyled(string.format("-%,.0f RF/s", energyOutput), ioXPos, 21, COLOR_BLACK, COLOR_RED, ioScale)

    t.setTextScale(1)
    t.setBackgroundColor(COLOR_BLACK)
    t.setTextColor(COLOR_CYAN)
    t.setCursorPos(5, monitorHeight - 3)
    t.write(string.format("Last Update: %s", os.date("%H:%M:%S")))

    t.setTextColor(COLOR_LIGHT_GRAY)
    t.setCursorPos(5, monitorHeight - 1)
    t.write("Press CTRL+T to terminate.")

    lastStoredEnergy = currentStoredEnergy
    lastUpdateTime = currentTime

    sleep(1)
end
